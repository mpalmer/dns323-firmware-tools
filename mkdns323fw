#!/usr/bin/ruby

# Create a firmware file suitable for upload to a DNS-323 or CH3SNAS
# device.
#
# Copyright (C) 2008 Matt Palmer <mpalmer@hezmatt.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#
# Script based on information provided by Leschinsky Oleg.
#
# To construct a firmware image, you need:-
#   * A u-boot packaged kernel
#   * A u-Boot-packaged initrd
#   * A squashfs image (if required by your NAS, see part_names in known_devices)
#   * Either to find your device in the list of known devices,
#     or the product/custom/model IDs for your target device.

require 'optparse'

$known_devices = {
	'DNS-323-B1' => {
		:signature => 'FrodoII',
		:prod_id => 7, :custom_id => 1, :model_id => 1,
		:hardware_id => 1, :sub_id => 3,
		:part_names => [:kernel, :initrd, :defaults],
		:header_size => 64,
	},
	'CH3SNAS' => {
		:signature => 'FrodoII',
		:prod_id => 7, :custom_id => 2, :model_id => 1,
		:hardware_id => 1, :sub_id => 4,
		:part_names => [:kernel, :initrd, :defaults],
		:header_size => 64,
	},
	'DNS-321' => {
		:signature => 'Chopper',
		:prod_id =>10, :custom_id => 1, :model_id => 1,
		:hardware_id => 2, :sub_id => 1,
		:part_names => [:kernel, :initrd, :defaults],
		:header_size => 64,
	},
	'DNS-320' => {
		:signature => 'DNS323D1', # No, this is not a mistake.
		:prod_id => 0, :custom_id => 8, :model_id => 7,
		:hardware_id => 2, :sub_id => 0,
		:part_names => [:kernel, :initrd, :squashfs, :defaults],
		:header_size => 128,
	},
	'DNS-320L' => {
		:signature => 'DNS320L',
		:prod_id => 0, :custom_id => 8, :model_id => 11,
		:hardware_id => 1, :sub_id => 0,
		:part_names => [:kernel, :initrd, :squashfs, :defaults],
		:header_size => 128,
	},
	'DNS-325' => {
		:signature => 'DNS-325',
		:prod_id => 0, :custom_id => 8, :model_id => 5,
		:hardware_id => 1, :sub_id => 0,
		:part_names => [:kernel, :initrd, :squashfs, :defaults],
		:header_size => 128,
	},
	# NB: A DNS-343 Image is more complicated. There is an extra
	# file appended to the image, the offset for which is at the
	# end of the 64 byte header
}

def main
	opts = parse_cmdline

	validate_command_line(opts)
	
	ctl_header = ''
	part_names = opts[:part_names]
	header_size = opts[:header_size]
	
	offset = header_size
	part_names.each do |part|
		size = opts[part].nil? ? 0 : File.stat(opts[part]).size
		ctl_header += [offset, size].pack("V2")
		offset += size
	end
	
	part_names.each do |part|
		checksum = opts[part].nil? ? 0 : checksum(opts[part])
		ctl_header += [checksum].pack("V")
	end
	
	ctl_header += [
		"\x55\xAA",
		opts[:signature],
		"\x55\xAA",
		opts[:prod_id],
		opts[:custom_id],
		opts[:model_id],
		opts[:hardware_id],
		opts[:sub_id],
	].pack("a2a8a2c5")
	
	File.open(opts[:output], 'w') do |fd|
		fd.write ctl_header
		fd.write "\x00" * (header_size - ctl_header.length)
		part_names.each do |part|
			fd.write File.read(opts[part]) unless opts[part].nil?
		end
	end
	
	puts "Firmware generation completed successfully."
end

def validate_command_line(opts)
	# Fill in header options with the defaults for a known device
	opts[:known_device] ||= 'DNS-323-B1'
	%w{signature prod_id custom_id model_id hardware_id sub_id part_names header_size}.each do |k|
		opts[k.to_sym] ||= $known_devices[opts[:known_device]][k.to_sym]
	end

	%w{kernel initrd output}.each do |k|
		if opts[k.to_sym].nil?
			$stderr.puts "Missing required argument #{k}"
			exit 1
		end
	end

	%w{kernel initrd defaults squashfs}.each do |k|
		next unless opts[k.to_sym]
		exit 1 unless verify_file(opts[k.to_sym], k.to_sym)
	end
end

def verify_file(file, file_type)
	if !File.exist?(file)
		puts "File #{file} does not exist!"
		return false
	end

	case file_type
	when :kernel,:initrd
		unless File.read(file, 4) == "\x27\x05\x19\x56"
			puts "WARNING: #{file} does not appear to be a u-boot image file"
			return false
		end
	when :defaults
		unless File.read(file, 2) == "\x1f\x8b"
			puts "WARNING: #{file} does not appear to be gzipped"
			return false
		end
	when :squashfs
		unless ['hsqs', 'shsq'].include?(File.read(file, 4, 0x800))
			puts "WARNING: #{file} does not appear to be a squashfs filesystem"
			return false
		end
	else
		puts "WARNING: Cannot verify #{file} (type #{file_type})"
	end
	return true
end

def checksum(file)
	sum = 0
	
	File.read(file).unpack("V*").each { |v| sum ^= v }

	sum
end

def parse_cmdline
	opts = OptionParser.new
	optargs = {}

	opts.on('-h', '--help', "Print this help") { optargs[:help] = true }
	opts.on('-k KERNEL', '--kernel KERNEL', "Specify the kernel to include in the firmware image", String) { |k| optargs[:kernel] = k }
	opts.on('-i INITRD', '--initrd INITRD', "Specify the initrd to include in the firmware image", String) { |i| optargs[:initrd] = i }
	opts.on('-d DEFAULTS', '--defaults DEFAULTS', "Specify the defaults.tar.gz to include in the firmware image (optional)", String) { |d| optargs[:defaults] = d }
	opts.on('-q SQUASHFS', '--squashfs SQUASHFS', "Specify the image.cfs to include in the firmware image (if your device needs it)", String) { |q| optargs[:squashfs] = q }
	opts.on('-o OUTPUT', '--output OUTPUT', "Specify where to put the resulting firmware image", String) { |o| optargs[:output] = o }
	opts.on('-e DEVICE', '--known-device DEVICE', "The target device name, setting defaults for firmware-generation. Possible values are "+($known_devices.keys.join(', ')), String) { |e| optargs[:known_device] = e }
	opts.on('-p PROD_ID', '--product-id PROD_ID', "The product ID to embed in the firmware image", Integer) { |p| optargs[:prod_id] = p }
	opts.on('-c CUSTOM_ID', '--custom-id CUSTOM_ID', "The custom ID to embed in the firmware image", Integer) { |c| optargs[:custom_id] = c }
	opts.on('-m MODEL_ID', '--model-id MODEL_ID', "The model ID to embed in the firmware image", Integer) { |m| optargs[:model_id] = m }
	opts.on('-s SIGNATURE', '--signature SIGNATURE', "The firmware signature type (either FrodoII, Chopper or Gandolf)", String) { |s| optargs[:signature] = s }
	opts.on('-w HARDWARE_ID', '--hardware-id HARDWARE_ID', "The hardware ID to embed in the firmware image", Integer) { |w| optargs[:hardware_id] = w }
	opts.on('-u SUB_ID', '--sub-id SUB_ID', "The sub ID to embed in the firmware image", Integer) { |u| optargs[:sub_id] = u }

	opts.parse(ARGV)

	if optargs[:help]
		$stderr.puts opts.to_s
		exit 0
	end

	optargs
end

main
