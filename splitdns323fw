#!/usr/bin/ruby

# Take a firmware file for various NAS devices, and write out it's
# constituent parts.
#
# Copyright (C) 2008 Matt Palmer <mpalmer@hezmatt.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#
# Script based on information provided by Leschinsky Oleg.
#
# Takes a firmware file image as it's sole mandatory argument, and verifies
# that the signature and checksums are OK before extracting whichever
# element(s) of the firmware you requested (if any).  Also displays the
# Product/Custom/Model ID, and the firmware signature type.

require 'optparse'

$known_devices = {
	'DNS-323-B1' => {
		:fw_type => 'FrodoII',
		:prod_id => 7, :custom_id => 1, :model_id => 1,
		:part_names => [:kernel, :initrd, :defaults],
	},
	'CH3SNAS' => {
		:fw_type => 'FrodoII',
		:prod_id => 7, :custom_id => 2, :model_id => 1,
		:part_names => [:kernel, :initrd, :defaults],
	},
	'DNS-343' => {
		:fw_type => 'Gandolf',
		:prod_id => 9, :custom_id => 1, :model_id => 1,
		:part_names => [:kernel, :initrd, :defaults],
	},
	'DNS-321' => {
		:fw_type => 'Chopper',
		:prod_id =>10, :custom_id => 1, :model_id => 1,
		:part_names => [:kernel, :initrd, :defaults],
	},
	'DNS-320' => {
		:fw_type => 'DNS323D1', # No, this is not a mistake.
		:prod_id => 0, :custom_id => 8, :model_id => 7,
		:part_names => [:kernel, :initrd, :squashfs, :defaults],
	},
	'DNS-320L' => {
		:fw_type => 'DNS320L',
		:prod_id => 0, :custom_id => 8, :model_id => 11,
		:part_names => [:kernel, :initrd, :squashfs, :defaults],
	},
	'DNS-325' => {
		:fw_type => 'DNS-325',
		:prod_id => 0, :custom_id => 8, :model_id => 5,
		:part_names => [:kernel, :initrd, :squashfs, :defaults],
	},
}

def main
	opts = parse_cmdline

	validate_command_line(opts)
	
	header = {}
	
	# Find signature
	header_bin = File.read(opts[:image], 128)
	header_start = header_bin.index(%r(\x55\xAA.{8}\x55\xAA))
	if header_start.nil?
		puts "Header signature not found"
		exit 1
	end

	# Parse latter half of header
	header[:fw_type], header[:prod_id], header[:custom_id], header[:model_id],
	header[:hardware_id], header[:sub_id] = header_bin.byteslice(header_start, 64).unpack('xxA8xxc5')

	# Find out which NAS this is.
	nas_candidates = $known_devices.keys.select { |n|
		header[:fw_type]   == $known_devices[n][:fw_type] &&
		header[:prod_id]   == $known_devices[n][:prod_id] &&
		header[:custom_id] == $known_devices[n][:custom_id] &&
		header[:model_id]  == $known_devices[n][:model_id]
	}
	if nas_candidates.length == 1
	  header[:device_name] = nas_candidates[0]
	  puts "Firmware is for a #{header[:device_name]}"
	else
	  puts "WARNING: Unknown NAS #{header[:fw_type]} #{header[:prod_id]} #{header[:custom_id]} #{header[:model_id]}"
	end

	# Unpack offset, size, .. and checksums into arrays
	part_names = header[:device_name] ? $known_devices[header[:device_name]][:part_names] : []
	offsets = header_bin.byteslice(0, (header_start / 3) * 2).unpack('V*')
	checksums = header_bin.byteslice((header_start / 3) * 2, header_start / 3).unpack('V*')

	# Munge offsets into dict
	header[:parts] = {}
	offsets.each_slice(2).with_index do |(offset, size), i|
		header[:parts][part_names[i] || "unknown#{i}"] = {
			:offset => offset,
			:size => size,
			:sum => checksums[i],
		}
	end

	puts "Parsed header: #{header.inspect}"

	# Verify checksum & optionally extract each part
	header[:parts].each do |part_name, part|
		puts "#{part_name} is #{part[:size]} bytes"
		content = File.read(opts[:image], part[:size], part[:offset])
		if(content.length < part[:size])
			puts "WARNING: offset goes beyond firmware image (probably a DNS-320 image)"
			content += "\x00" * (part[:size] - content.length)
		end
		verify_sum(content, part[:sum], part_name)

		# Skip if an extract wasn't requested
		next unless opts[part_name]
		File.open(opts[part_name], 'w') { |fd| fd.write(content) }
		puts "#{part_name} written to #{opts[part_name]}"
		verify_file(opts[part_name], part_name)
	end
end

def validate_command_line(opts)
	if !File.exist?(opts[:image])
		$stderr.puts "Firmware image file (#{opts[:image]}) doesn't exist!"
		exit 1
	end
end

def verify_file(file, file_type)
	if !File.exist?(file)
		puts "File #{file} does not exist!"
		return false
	end

	case file_type
	when :kernel,:initrd
		unless File.read(file, 4) == "\x27\x05\x19\x56"
			puts "WARNING: #{file} does not appear to be a u-boot image file"
			return false
		end
	when :defaults
		unless File.read(file, 2) == "\x1f\x8b"
			puts "WARNING: #{file} does not appear to be gzipped"
			return false
		end
	when :squashfs
		unless ['hsqs', 'shsq'].include?(File.read(file, 4, 0x800))
			puts "WARNING: #{file} does not appear to be a squashfs filesystem"
			return false
		end
	else
		puts "WARNING: Cannot verify #{file} (type #{file_type})"
	end
	return true
end

def verify_sum(s, expected_sum, desc)
	actual_sum = 0
	s.unpack("V*").each { |v| actual_sum ^= v }

	if actual_sum == expected_sum
		puts "#{desc} checksum matches"
	else
		puts "WARNING: #{desc} checksum mismatch (expected #{expected_sum}, got #{actual_sum})"
	end
end

def parse_cmdline
	opts = OptionParser.new
	optargs = {}

	opts.on('-h', '--help', "Print this help") { optargs[:help] = true }
	opts.on('-k KERNEL', '--kernel KERNEL', "Write out the kernel to the specified file", String) { |k| optargs[:kernel] = k }
	opts.on('-i INITRD', '--initrd INITRD', "Write out the initrd to the specified file", String) { |i| optargs[:initrd] = i }
	opts.on('-d DEFAULTS', '--defaults DEFAULTS', "Write out the defaults.tar.gz to the specified file", String) { |d| optargs[:defaults] = d }
	opts.on('-s SQUASHFS', '--squashfs SQUASHFS', "Write out the image.cfs to the specified file", String) { |s| optargs[:squashfs] = s }

	image = opts.parse(ARGV)

	if optargs[:help]
		$stderr.puts opts.to_s
		exit 0
	end
	
	if image.nil? or image.empty?
		$stderr.puts "No firmware image provided!"
		exit 1
	end
	
	if image.length > 1
		$stderr.puts "I can only read one firmware image!"
		exit 1
	end
		
	optargs[:image] = image[0]

	optargs
end

main
